# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SaniBidStarSD
                                 A QGIS plugin
 Sistemas de Tratamento de Águas Residuárias Simplificados e Descentralizados.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-05-29
        git sha              : $Format:%H$
        copyright            : (C) 2021 by UFBA/BID
        email                : ufba@ufba.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   * 
 *                                                                         *
 ***************************************************************************/
"""
import os.path
from PyQt5.QtWidgets import QMessageBox
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QDoubleSpinBox
from qgis._core import QgsMessageLog
from qgis.core import QgsProject, QgsApplication, QgsMapLayer

from .core.data.data_manager import ProjectDataManager
from .core.translators.sanibid_translator import SanibidTranslator
from .core.draw_utils.draw_layer import SanibidDrawLayerType, SanibidDrawLayer
from .core.draw_utils.draw_shadow import DrawShadowRaster
from .core.draw_utils.draw_move_rotate_raster import MoveDrawRaster, RotateRasterMapTool

from .gui.ui_dock import DockUI
from .gui.ui_new_project import NewProjectUI
from .ui.SaniBidStarSD_dockwidget import SaniBidStarSDDockWidget
from .utils.utils import Utils
from .resources import *


class SaniBidStarSD:
    """QGIS Plugin Implementation."""

    translator = SanibidTranslator()


    def translate(self, msg, disambiguation=None, n=-1):
        return QCoreApplication.translate(SaniBidStarSD.__name__, msg, disambiguation, n)

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        self.screenNew = NewProjectUI()

        # variaveis de projeto
        self.title = 'SaniHUB DWATS'
        self.utils = Utils()
        self.dock = None

        #draw
        self.layers = {}
        QgsProject.instance().layerRemoved.connect(self.layerRemoved)
        self.iface.currentLayerChanged.connect(self.currentLayerChanged)

        #self.iface.currentLayerChanged.connect(self.change_layer)
        #self.controlLayers = ControlsDrawLayer(self.iface, self.title)
        #QgsProject.instance().layerRemoved.connect(self.remove_layer)

        self.translator.load()
        QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = u'&SaniBID STAR SD'
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(self.title)
        self.toolbar.setObjectName(self.title)

        # print "** INITIALIZING SaniBidStartSD"
        self.pluginIsActive = False
        self.dockwidget = None

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        self.actionStartPlugin = QAction(
            QIcon(':/plugins/tratamientos_descentralizados/icons/ICON_DW.png'),
            self.title,
            self.iface.mainWindow()
            )
        self.actionStartPlugin.setObjectName(self.title)
        self.actionStartPlugin.triggered.connect(self.run)

        self.actionInsertETEMap = QAction(
            QIcon(':/plugins/tratamientos_descentralizados/icons/ICON_ADD.png'),
            self.translate(u'Inserir ETE'),
            self.iface.mainWindow()
            )
        self.actionInsertETEMap.setObjectName('insert_ete_map')
        self.actionInsertETEMap.triggered.connect(self.insertImgRaster)

        self.actionMoveETEMap = QAction(
            QIcon(':/plugins/tratamientos_descentralizados/icons/ICON_MOVE.png'),
            self.translate(u'Mover ETE'),
            self.iface.mainWindow()
            )
        self.actionMoveETEMap.setObjectName('move_ete_map')
        self.actionMoveETEMap.triggered.connect(self.moveRaster)
        self.actionMoveETEMap.setCheckable(True)

        self.actionRotateETEMap = QAction(
            QIcon(':/plugins/tratamientos_descentralizados/icons/ICON_ROTATE.png'),
            self.translate(u'Girar ETE'),
            self.iface.mainWindow()
            )
        self.actionRotateETEMap.setObjectName('rotate_ete_map')
        self.actionRotateETEMap.triggered.connect(self.rotateRaster)
        self.actionRotateETEMap.setCheckable(True)
        self.iface.addPluginToMenu(self.title, self.actionStartPlugin)

        self.spinBoxRotate = QDoubleSpinBox(self.iface.mainWindow())
        self.spinBoxRotate.setDecimals(3)
        self.spinBoxRotate.setMinimum(-180)
        self.spinBoxRotate.setMaximum(180)
        self.spinBoxRotate.setSingleStep(0.1)
        self.spinBoxRotate.setValue(0.0)
        self.spinBoxRotate.setToolTip(self.translate('Rotação - valores de -180 a 180'))
        self.spinBoxRotate.setObjectName(self.title)
        self.spinBoxRotate.valueChanged.connect(self.spinBoxRotateValueChangeEvent)

        self.toolbar = self.iface.addToolBar(self.title)
        self.toolbar.addAction(self.actionStartPlugin)
        self.toolbar.addAction(self.actionInsertETEMap)
        self.toolbar.addAction(self.actionMoveETEMap)
        self.toolbar.addAction(self.actionRotateETEMap)
        self.toolbar.addWidget(self.spinBoxRotate)

        # Register plugin layer type
        screenExtent = self.iface.mapCanvas().extent()
        self.layerType = SanibidDrawLayerType(self, screenExtent)
        QgsApplication.pluginLayerRegistry().addPluginLayerType(self.layerType)
        self.moveTool = MoveDrawRaster(self.iface)
        self.moveTool.setAction(self.actionMoveETEMap)
        self.rotateTool = RotateRasterMapTool(self.iface)
        self.rotateTool.setAction(self.actionRotateETEMap)

        self.currentTool = None
        self.checkCurrentLayerIsPluginLayer()

        if self.dockwidget is None:
            # Create the dockwidget (after translation) and keep reference
            self.dockwidget = SaniBidStarSDDockWidget()
            self.dockwidget.setWindowTitle(self.title)

        if self.dock is None:
            self.dock = DockUI(self.iface)
        self.dockwidget.setWidget(self.dock.scroll)
        self.dock.loadDock()
        QgsProject.instance().readProject.connect(self.on_project_clear)
        QgsProject.instance().writeProject.connect(self.on_project_clear)
        QgsProject.instance().cleared.connect(self.on_project_clear)

    def on_project_clear(self):
        self.dock.hard_reload()
        #self.dock.reload()

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        # print "** CLOSING SaniBidStartSD"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        # print "** UNLOAD SaniBidStartSD"
        self.iface.layerToolBar().removeAction(self.actionInsertETEMap)
        self.iface.removeAddLayerAction(self.actionInsertETEMap)

        for action in self.actions:
            self.iface.removePluginMenu(
                self.translate(u'&SaniHUB DWATS'),
                self.actionInsertETEMap)
            self.iface.removeToolBarIcon(action)
        QgsApplication.pluginLayerRegistry().removePluginLayerType(
            SanibidDrawLayer.LAYER_TYPE
            )
        QgsProject.instance().layerRemoved.disconnect(self.layerRemoved)
        self.iface.currentLayerChanged.disconnect(self.currentLayerChanged)
        # remove the toolbar
        del self.toolbar

    # --------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""
        if not self.pluginIsActive:
            self.pluginIsActive = True

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            # self.dock.reload()
            self.dock.hard_reload()
            self.dockwidget.show()

    def insertImgRaster(self):
        if ProjectDataManager.is_project_data_loaded():
            screenExtent = self.iface.mapCanvas().extent()  # Retorna a extensão de zoom atual da tela do mapa
            layer = SanibidDrawLayer(self, screenExtent, self.title)
            if layer.isValid():
                QgsProject.instance().addMapLayer(layer)
                self.layers[layer.id()] = layer
                self.iface.setActiveLayer(layer)
                self.actionInsertETEMap.setEnabled(False)
        else:
            icon = QMessageBox.Critical
            self.utils.showDialog(self.title, self.translate(
                'Antes de inserir a ETE no mapa, deve-se preencher os dados do projeto.'), icon)

    def layerRemoved(self, layerId):
        if layerId in self.layers:
            del self.layers[layerId]
            self.checkCurrentLayerIsPluginLayer()

    def checkCurrentLayerIsPluginLayer(self):
        layer = self.iface.activeLayer()
        all_layers = QgsProject.instance().mapLayersByName(self.title)
        if (layer and layer.type() == QgsMapLayer.PluginLayer
                and layer.pluginLayerType() == SanibidDrawLayer.LAYER_TYPE):
            self.actionInsertETEMap.setEnabled(False)
            self.actionMoveETEMap.setEnabled(True)
            self.actionRotateETEMap.setEnabled(True)
            self.spinBoxRotate.setEnabled(True)
            self.spinBoxRotateValueSetValue(layer.rotation)
            try:
                self.layer.transformParametersChanged.disconnect()
            except Exception:
                pass
            layer.transformParametersChanged.connect(self.spinBoxRotateUpdate)
            self.layer = layer
            if self.currentTool:
                self.currentTool.reset()
                self.currentTool.setLayer(layer)
        else:
            if len(all_layers) > 0:
                self.actionInsertETEMap.setEnabled(False)
            else:
                self.actionInsertETEMap.setEnabled(True)
            self.actionMoveETEMap.setEnabled(False)
            self.actionRotateETEMap.setEnabled(False)
            self.spinBoxRotate.setEnabled(False)
            self.spinBoxRotateValueSetValue(0)
            try:
                self.layer.transformParametersChanged.disconnect()
            except Exception:
                pass
            self.layer = None
            if self.currentTool:
                self.currentTool.reset()
                self.currentTool.setLayer(None)
                self._uncheckCurrentTool()

    def currentLayerChanged(self, layer):
        self.checkCurrentLayerIsPluginLayer()

    def moveRaster(self):
        self._toggleTool(self.moveTool)

    def rotateRaster(self):
        self._toggleTool(self.rotateTool)

    def _toggleTool(self, tool):
        if self.currentTool is tool:
            self._uncheckCurrentTool()
        else:
            self.currentTool = tool
            layer = self.iface.activeLayer()
            tool.setLayer(layer)
            self.iface.mapCanvas().setMapTool(tool)

    def _uncheckCurrentTool(self):
        # Toggle
        self.iface.mapCanvas().unsetMapTool(self.currentTool)
        # replace tool with Pan
        self.iface.actionPan().trigger()
        self.currentTool = None

    def spinBoxRotateValueChangeEvent(self, val):
        layer = self.layer
        layer.history.append(
            {"action": "rotation", "rotation": layer.rotation, "center": layer.center}
        )
        layer.setRotation(val)
        layer.repaint()
        layer.commitTransformParameters()

    def spinBoxRotateUpdate(self, newParameters):
        self.spinBoxRotateValueSetValue(self.layer.rotation)

    def spinBoxRotateValueSetValue(self, value):
        self.spinBoxRotate.valueChanged.disconnect()
        self.spinBoxRotate.setValue(value)
        self.spinBoxRotate.valueChanged.connect(self.spinBoxRotateValueChangeEvent)

